/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "./common.js"
  
export declare namespace TicketingCore {
      
    export type TierConfigStruct = {name: string, capacity: BigNumberish, price: BigNumberish}

    export type TierConfigStructOutput = [name: string, capacity: bigint, price: bigint] & {name: string, capacity: bigint, price: bigint }
  

    export type TierStruct = {name: string, capacity: BigNumberish, price: BigNumberish, nftContract: AddressLike, sold: AddressLike}

    export type TierStructOutput = [name: string, capacity: bigint, price: bigint, nftContract: string, sold: string] & {name: string, capacity: bigint, price: bigint, nftContract: string, sold: string }
  

    export type EventStruct = {id: BigNumberish, name: string, venue: string, timestamp: BigNumberish, organizer: AddressLike, tiers: TicketingCore.TierStruct[], revenue: AddressLike}

    export type EventStructOutput = [id: bigint, name: string, venue: string, timestamp: bigint, organizer: string, tiers: TicketingCore.TierStructOutput[], revenue: string] & {id: bigint, name: string, venue: string, timestamp: bigint, organizer: string, tiers: TicketingCore.TierStructOutput[], revenue: string }
  
    }

  export interface TicketingCoreInterface extends Interface {
    getFunction(nameOrSignature: "canRefund" | "createEvent" | "getAvailableRevenue" | "getEventDetails" | "getRefundDeadline" | "getTierAvailability" | "paymentToken" | "purchaseTicket" | "refundTicket" | "withdrawRevenue"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "EventCreated" | "RevenueWithdrawn" | "TicketPurchased" | "TicketRefunded"): EventFragment;

    encodeFunctionData(functionFragment: 'canRefund', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'createEvent', values: [string, string, BigNumberish, TicketingCore.TierConfigStruct[]]): string;
encodeFunctionData(functionFragment: 'getAvailableRevenue', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'getEventDetails', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'getRefundDeadline', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'getTierAvailability', values: [BigNumberish, BigNumberish]): string;
encodeFunctionData(functionFragment: 'paymentToken', values?: undefined): string;
encodeFunctionData(functionFragment: 'purchaseTicket', values: [BigNumberish, BigNumberish]): string;
encodeFunctionData(functionFragment: 'refundTicket', values: [BigNumberish, BigNumberish, BigNumberish]): string;
encodeFunctionData(functionFragment: 'withdrawRevenue', values: [BigNumberish, BigNumberish]): string;

    decodeFunctionResult(functionFragment: 'canRefund', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'createEvent', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getAvailableRevenue', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getEventDetails', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getRefundDeadline', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getTierAvailability', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'paymentToken', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'purchaseTicket', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'refundTicket', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'withdrawRevenue', data: BytesLike): Result;
  }

  
    export namespace EventCreatedEvent {
      export type InputTuple = [eventId: BigNumberish, name: string, venue: string, timestamp: BigNumberish, organizer: AddressLike, tierCount: BigNumberish];
      export type OutputTuple = [eventId: bigint, name: string, venue: string, timestamp: bigint, organizer: string, tierCount: bigint];
      export interface OutputObject {eventId: bigint, name: string, venue: string, timestamp: bigint, organizer: string, tierCount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace RevenueWithdrawnEvent {
      export type InputTuple = [eventId: BigNumberish, organizer: AddressLike, amount: BigNumberish];
      export type OutputTuple = [eventId: bigint, organizer: string, amount: bigint];
      export interface OutputObject {eventId: bigint, organizer: string, amount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace TicketPurchasedEvent {
      export type InputTuple = [eventId: BigNumberish, tierIdx: BigNumberish, buyer: AddressLike, tokenId: BigNumberish, price: BigNumberish];
      export type OutputTuple = [eventId: bigint, tierIdx: bigint, buyer: string, tokenId: bigint, price: bigint];
      export interface OutputObject {eventId: bigint, tierIdx: bigint, buyer: string, tokenId: bigint, price: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace TicketRefundedEvent {
      export type InputTuple = [eventId: BigNumberish, tierIdx: BigNumberish, buyer: AddressLike, tokenId: BigNumberish, refundAmount: BigNumberish];
      export type OutputTuple = [eventId: bigint, tierIdx: bigint, buyer: string, tokenId: bigint, refundAmount: bigint];
      export interface OutputObject {eventId: bigint, tierIdx: bigint, buyer: string, tokenId: bigint, refundAmount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface TicketingCore extends BaseContract {
    
    connect(runner?: ContractRunner | null): TicketingCore;
    waitForDeployment(): Promise<this>;

    interface: TicketingCoreInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    canRefund: TypedContractMethod<
      [eventId: BigNumberish, ],
      [boolean],
      'view'
    >
    

    
    createEvent: TypedContractMethod<
      [name: string, venue: string, timestamp: BigNumberish, tierConfigs: TicketingCore.TierConfigStruct[], ],
      [bigint],
      'nonpayable'
    >
    

    
    getAvailableRevenue: TypedContractMethod<
      [eventId: BigNumberish, ],
      [bigint],
      'view'
    >
    

    
    getEventDetails: TypedContractMethod<
      [eventId: BigNumberish, ],
      [TicketingCore.EventStructOutput],
      'view'
    >
    

    
    getRefundDeadline: TypedContractMethod<
      [eventId: BigNumberish, ],
      [bigint],
      'view'
    >
    

    
    getTierAvailability: TypedContractMethod<
      [eventId: BigNumberish, tierIdx: BigNumberish, ],
      [[bigint, bigint] & {sold: bigint, capacity: bigint }],
      'view'
    >
    

    
    paymentToken: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    purchaseTicket: TypedContractMethod<
      [eventId: BigNumberish, tierIdx: BigNumberish, ],
      [bigint],
      'nonpayable'
    >
    

    
    refundTicket: TypedContractMethod<
      [eventId: BigNumberish, tierIdx: BigNumberish, tokenId: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    withdrawRevenue: TypedContractMethod<
      [eventId: BigNumberish, amount: BigNumberish, ],
      [void],
      'nonpayable'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'canRefund'): TypedContractMethod<
      [eventId: BigNumberish, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'createEvent'): TypedContractMethod<
      [name: string, venue: string, timestamp: BigNumberish, tierConfigs: TicketingCore.TierConfigStruct[], ],
      [bigint],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'getAvailableRevenue'): TypedContractMethod<
      [eventId: BigNumberish, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'getEventDetails'): TypedContractMethod<
      [eventId: BigNumberish, ],
      [TicketingCore.EventStructOutput],
      'view'
    >;
getFunction(nameOrSignature: 'getRefundDeadline'): TypedContractMethod<
      [eventId: BigNumberish, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'getTierAvailability'): TypedContractMethod<
      [eventId: BigNumberish, tierIdx: BigNumberish, ],
      [[bigint, bigint] & {sold: bigint, capacity: bigint }],
      'view'
    >;
getFunction(nameOrSignature: 'paymentToken'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'purchaseTicket'): TypedContractMethod<
      [eventId: BigNumberish, tierIdx: BigNumberish, ],
      [bigint],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'refundTicket'): TypedContractMethod<
      [eventId: BigNumberish, tierIdx: BigNumberish, tokenId: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'withdrawRevenue'): TypedContractMethod<
      [eventId: BigNumberish, amount: BigNumberish, ],
      [void],
      'nonpayable'
    >;

    getEvent(key: 'EventCreated'): TypedContractEvent<EventCreatedEvent.InputTuple, EventCreatedEvent.OutputTuple, EventCreatedEvent.OutputObject>;
getEvent(key: 'RevenueWithdrawn'): TypedContractEvent<RevenueWithdrawnEvent.InputTuple, RevenueWithdrawnEvent.OutputTuple, RevenueWithdrawnEvent.OutputObject>;
getEvent(key: 'TicketPurchased'): TypedContractEvent<TicketPurchasedEvent.InputTuple, TicketPurchasedEvent.OutputTuple, TicketPurchasedEvent.OutputObject>;
getEvent(key: 'TicketRefunded'): TypedContractEvent<TicketRefundedEvent.InputTuple, TicketRefundedEvent.OutputTuple, TicketRefundedEvent.OutputObject>;

    filters: {
      
      'EventCreated(uint256,string,string,uint256,address,uint256)': TypedContractEvent<EventCreatedEvent.InputTuple, EventCreatedEvent.OutputTuple, EventCreatedEvent.OutputObject>;
      EventCreated: TypedContractEvent<EventCreatedEvent.InputTuple, EventCreatedEvent.OutputTuple, EventCreatedEvent.OutputObject>;
    

      'RevenueWithdrawn(uint256,address,uint256)': TypedContractEvent<RevenueWithdrawnEvent.InputTuple, RevenueWithdrawnEvent.OutputTuple, RevenueWithdrawnEvent.OutputObject>;
      RevenueWithdrawn: TypedContractEvent<RevenueWithdrawnEvent.InputTuple, RevenueWithdrawnEvent.OutputTuple, RevenueWithdrawnEvent.OutputObject>;
    

      'TicketPurchased(uint256,uint256,address,uint256,uint256)': TypedContractEvent<TicketPurchasedEvent.InputTuple, TicketPurchasedEvent.OutputTuple, TicketPurchasedEvent.OutputObject>;
      TicketPurchased: TypedContractEvent<TicketPurchasedEvent.InputTuple, TicketPurchasedEvent.OutputTuple, TicketPurchasedEvent.OutputObject>;
    

      'TicketRefunded(uint256,uint256,address,uint256,uint256)': TypedContractEvent<TicketRefundedEvent.InputTuple, TicketRefundedEvent.OutputTuple, TicketRefundedEvent.OutputObject>;
      TicketRefunded: TypedContractEvent<TicketRefundedEvent.InputTuple, TicketRefundedEvent.OutputTuple, TicketRefundedEvent.OutputObject>;
    
    };
  }